server:
  port: ${PORT:8080} # Should be kept unchanged if running in container

api:
  version: v1
  base-path: "/api#{'${api.version:}'.length > 0 ? '/${api.version:}' : ''}"
  server-base-path: "${spring.webflux.base-path:}${api.base-path:}"

spring:
#  main:
#    web-application-type: reactive # unnecessary
  application:
    name: ${APP_NAME:main-service}
  webflux:
    base-path: ${SERVER_BASE_PATH:}

  messages: # Alternative config option: create a bean of ReloadableResourceBundleMessageSource
    basename: ${MESSAGES_BASENAME:messages,custom-response-status,errors,error-codes} # name prefix for the file containing message props. Format: config.i18n.messages (dot-separated path names)
    cache-duration: 3600
    encoding: UTF-8

datasource:
  main-database:
    url: ${MAIN_DB_URL:r2dbc:mysql://localhost:3306/MICROTUBE}
    username: ${MAIN_DB_USERNAME:dbuser}
    password: ${MAIN_DB_PASSWORD:abc123}
  object-store:
    url: ${OBJECT_STORE_URL:http://127.0.0.1:9000}
    username: ${OBJECT_STORE_USERNAME:admin}
    password: ${OBJECT_STORE_PASSWORD:minioadmin}
    bucket:
      temporary: ${OBJECT_STORE_BUCKET_TEMP:temporary}
      hls: ${OBJECT_STORE_BUCKET_HLS:hls}
      avatar: ${OBJECT_STORE_BUCKET_AVATAR:avatar}
      thumbnail: ${OBJECT_STORE_BUCKET_THUMBNAIL:thumbnail}

application:
  include-internal-exception-message: ${INCLUDE_INTERNAL_EXCEPTION_MESSAGE:true}
  jwt:
    secret: ${JWT_SECRET:asdfg12345gyugyguggi67fy12ijpcsjop4904wojiUFHAKFHjoihouhu}
    usage-duration: ${JWT_USAGE_DURATION:120000} # Unit: millisecond

springdoc:
  swagger-ui:
#    path: /swagger-ui.html # Customize swagger-ui path; didn't work?
    enabled: true
    csrf:
      enabled: true
  api-docs:
    version: openapi_3_1
    enabled: true
#    path: /v3/api-docs


#fluentd:
#  host: ${FLUENTD_HOST:localhost}
#  port: ${FLUENTD_PORT:24224}

#logging:
#  level:
#    web: debug

eureka:
  client:
    service-url:
      defaultZone: ${SERVICE_REGISTRAR_URL:http://localhost:8761/eureka}
  instance:
    appname: Main service # Just a representational name, not used for routing/load balancing
#    prefer-ip-address: true
#    ip-address: ${EUREKA_INSTANCE_IPADDR:127.0.0.1}
    # Accept both hostname & IP address, so setting the 2 above props is unnecessary.
    hostname: ${EUREKA_INSTANCE_HOSTNAME:127.0.0.1}
    # If port is required to be specified, pass these props as program arguments.
    # If not specified, the server's port will be used by default.
#    secure-port-enabled: true
#    secure-port:

rest-service:
  auth:
    name: PROCESSOR-SERVICE
    api:
      fetch-user-info:
        method: GET
        path: /api/v1/auth/user

management:
  zipkin:
    tracing:
      export:
        enabled: false
